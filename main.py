from flask import Flask, request, send_from_directory
import openai
import requests
import os
import re
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}
lang_overrides = {}

call_request_triggers = [
    "—Å–æ–∑–≤–æ–Ω", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ö–æ—á—É –∑–≤–æ–Ω–æ–∫", "–º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
    "–∑–≤–æ–Ω–æ–∫", "–¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è", "–æ–±—Å—É–¥–∏—Ç—å", "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"
]

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

def send_telegram_photo(chat_id, photo_url, caption=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    payload = {"chat_id": chat_id, "photo": photo_url}
    if caption:
        payload["caption"] = caption
        payload["parse_mode"] = "Markdown"
    requests.post(url, json=payload)

def detect_lang(text):
    lower = text.lower()
    if any(word in lower for word in ["hello", "can you", "speak english", "english?", "what is", "tell about", "project"]):
        return "en"
    elif any(word in lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—á—Ç–æ", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ"]):
        return "ru"
    elif any(word in lower for word in ["–ø—Ä–∏–≤—ñ—Ç", "–¥–æ–±—Ä–æ–≥–æ", "—Ä–æ–∑–∫–∞–∂–∏", "–ø–æ—è—Å–Ω–∏", "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"]):
        return "uk"
    return None

def resolve_lang(lang_code, user_id, text):
    override = detect_lang(text)
    if override:
        lang_overrides[user_id] = override
        return override
    if user_id in lang_overrides:
        return lang_overrides[user_id]
    return lang_code if lang_code in ["ru", "uk"] else "en"

def get_welcome_message(lang):
    if lang == "ru":
        return "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon.\n–†–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
    elif lang == "uk":
        return "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥–¥—ñ–ª—É –ø—Ä–æ–¥–∞–∂—ñ–≤ Avalon.\n–ó —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ—î–∫—Ç–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó —Ç–∞ –∂–∏—Ç—Ç—è –Ω–∞ –ë–∞–ª—ñ. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?"
    else:
        return "üëã Hello! I'm the AI assistant of Avalon.\nI can help you with our projects, investment options, and life in Bali. How can I assist you?"

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    lang_code = message.get("from", {}).get("language_code", "en")
    lang = resolve_lang(lang_code, user_id, text)

    if not chat_id:
        return "no chat_id", 400

    if text == "/start":
        sessions[user_id] = []
        welcome = get_welcome_message(lang)
        print(f"[LOG] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {user_id} –Ω–∞ —è–∑—ã–∫–µ {lang}")
        send_telegram_message(chat_id, welcome)
        return "ok"

    if user_id not in lead_data and any(w in text.lower() for w in call_request_triggers):
        lead_data[user_id] = {}
        msg = {
            "ru": "üëã –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
            "uk": "üëã –Ø–∫ –¥–æ –≤–∞—Å –º–æ–∂–Ω–∞ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?",
            "en": "üëã May I have your name?"
        }
        send_telegram_message(chat_id, msg.get(lang, msg["en"]))
        return "ok"

    if user_id in lead_data:
        lead = lead_data.get(user_id, {})
        if "name" not in lead:
            lead["name"] = text
            msg = {
                "ru": "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: WhatsApp / Telegram / Zoom / Google Meet",
                "uk": "üì± –í–∫–∞–∂—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: WhatsApp / Telegram / Zoom / Google Meet",
                "en": "üì± Choose platform: WhatsApp / Telegram / Zoom / Google Meet"
            }
            send_telegram_message(chat_id, msg.get(lang, msg["en"]))
        elif "platform" not in lead:
            lead["platform"] = text
            if text.lower() == "whatsapp":
                msg = {
                    "ru": "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp:",
                    "uk": "üìû –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä WhatsApp:",
                    "en": "üìû Please enter your WhatsApp number:"
                }
                send_telegram_message(chat_id, msg.get(lang, msg["en"]))
            else:
                msg = {
                    "ru": "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?",
                    "uk": "üóì –ö–æ–ª–∏ –∑—Ä—É—á–Ω–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è?",
                    "en": "üóì When would you like to have a call?"
                }
                send_telegram_message(chat_id, msg.get(lang, msg["en"]))
        elif lead.get("platform", "").lower() == "whatsapp" and "phone" not in lead:
            lead["phone"] = text
            msg = {
                "ru": "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?",
                "uk": "üóì –ö–æ–ª–∏ –∑—Ä—É—á–Ω–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è?",
                "en": "üóì When would you like to have a call?"
            }
            send_telegram_message(chat_id, msg.get(lang, msg["en"]))
        else:
            lead["datetime"] = text
            now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
            sheet.append_row([
                now_str,
                lead.get("name", ""),
                f"@{username}",
                lead.get("phone", ""),
                text.split()[0] if len(text.split()) > 0 else "",
                text.split()[1] if len(text.split()) > 1 else "",
                lead.get("platform", ""),
                "",
                lang_code
            ])
            msg = {
                "ru": "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                "uk": "‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.",
                "en": "‚úÖ Details saved. Manager will contact you soon."
            }
            send_telegram_message(chat_id, msg.get(lang, msg["en"]))
            lead_data.pop(user_id, None)
        return "ok"

    return "ok"

@app.route("/AVALON/<path:filename>")
def serve_avalon_static(filename):
    return send_from_directory("AVALON", filename)

@app.route("/")
def home():
    return "Avalon AI –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
