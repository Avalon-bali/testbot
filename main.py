import random
import os
import re
import requests
import openai
import gspread
from flask import Flask, request
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}

def send_telegram_message(chat_id, text, photo_path=None):
    if photo_path:
        if os.path.exists(photo_path):
            print("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", photo_path)
            url_photo = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    'chat_id': chat_id,
                    'caption': text,
                    'parse_mode': 'Markdown'
                }
                response = requests.post(url_photo, files=files, data=data)
                print("üì§ –û—Ç–≤–µ—Ç Telegram (—Ñ–æ—Ç–æ):", response.status_code)
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", photo_path)
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                "parse_mode": "Markdown"
            }
            requests.post(url, json=payload)
    else:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        response = requests.post(url, json=payload)
        print("üì§ –û—Ç–≤–µ—Ç Telegram (—Ç–µ–∫—Å—Ç):", response.status_code)

def load_documents():
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read())
    return "\n\n".join(context_parts)

def load_system_prompt(lang_code):
    try:
        with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
            full_text = f.read()
            match = re.search(rf"### {lang_code}\n(.*?)\n###", full_text, re.DOTALL)
            return match.group(1).strip() if match else "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."
    except:
        return "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."

documents_context = load_documents()

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    raw_lang = message.get("from", {}).get("language_code", "en")[:2]
    lang_code = "ru" if raw_lang == "ru" else "ua" if raw_lang == "uk" else "en"
    system_prompt = load_system_prompt(lang_code)

    print(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if not chat_id:
        return "no chat_id", 400

    if text.lower() == "/start":
        greetings = {
            "ru": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
            "ua": "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Avalon. –Ü–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –¥–æ–ø–æ–º–æ–∂—É –∑ –ø—Ä–æ—î–∫—Ç–∞–º–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏ —Ç–∞ –∂–∏—Ç—Ç—è–º –Ω–∞ –ë–∞–ª—ñ. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?",
            "en": "üëã Hello! I'm the AI assistant of Avalon. Happy to help with our projects, investments, or relocating to Bali. How can I assist you today?"
        }
        greeting = greetings.get(lang_code, greetings["en"])
        sessions[user_id] = []
        lead_data.pop(user_id, None)
        send_telegram_message(chat_id, greeting)
        return "ok"

    # üì∏ –û—Ç–¥–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ "–∞–≤–∞–ª–æ–Ω"
    if "avalon" in text.lower():
        photo_path = "AVALON/avalon-photos/Avalon-reviews-and-ratings-1.jpg"
        reply_text = (
            "Avalon ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ë–∞–ª–∏.\n\n"
            "–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤ –æ—Å—Ç—Ä–æ–≤–∞. –ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã OM, BUDDHA –∏ TAO —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ç–æ–ø–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏.\n\n"
            "–ì–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ!"
        )
        send_telegram_message(chat_id, reply_text, photo_path=photo_path)
        return "ok"

    # GPT –ª–æ–≥–∏–∫–∞
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"
        print("‚ùå GPT Error:", e)

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot live ‚Äî with photo + prompt + return OK."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üü¢ Starting Avalon bot on port {port}")
    app.run(host="0.0.0.0", port=port)
