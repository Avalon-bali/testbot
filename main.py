from flask import Flask, request
import openai
import requests
import os
import re
from datetime import datetime

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

sessions = {}
lead_data = {}

def load_documents():
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read())
    return "\n\n".join(context_parts)

def load_system_prompt():
    with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
        return f.read()

documents_context = load_documents()
system_prompt = load_system_prompt()

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip().lower()
    username = message.get("from", {}).get("username", "")
    lang_code = message.get("from", {}).get("language_code", "ru")

    if not chat_id:
        return "no chat_id", 400

    if text == "/start":
        welcome = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon.\n–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ OM, BUDDHA, TAO –∏–ª–∏ –ø—Ä–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –ë–∞–ª–∏."
        sessions[user_id] = []
        lead_data.pop(user_id, None)
        send_telegram_message(chat_id, welcome)
        return "ok"

    # FSM: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if user_id in lead_data:
        lead = lead_data[user_id]
        if "name" not in lead:
            lead["name"] = text
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–≤–æ–Ω–∫–∞: WhatsApp / Telegram / Zoom / Google Meet")
            return "ok"
        elif "platform" not in lead:
            lead["platform"] = text
            if text.lower() == "whatsapp":
                send_telegram_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp:")
            else:
                send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif lead.get("platform", "").lower() == "whatsapp" and "phone" not in lead:
            lead["phone"] = text
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif "datetime" not in lead:
            lead["datetime"] = text
            send_telegram_message(chat_id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
            lead_data.pop(user_id, None)
            return "ok"
        else:
            send_telegram_message(chat_id, "üìå –î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–≤–æ–Ω–∫–∞, –∏ —è —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂—É.")
            return "ok"

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ GPT
    history = sessions.get(user_id, [])
    last_bot_message = ""
    for msg in reversed(history):
        if msg["role"] == "assistant":
            last_bot_message = msg["content"].lower()
            break

    # –ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ GPT –±—ã–ª–∞ —Ñ—Ä–∞–∑–∞ –æ –∑–≤–æ–Ω–∫–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º FSM
    invite_keywords = ["—Å–æ–∑–≤–æ–Ω", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–∑–≤–æ–Ω–æ–∫", "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫", "—Å–≤—è–∑–∞—Ç—å—Å—è"]
    confirm_phrases = ["–¥–∞", "–¥–∞–≤–∞–π—Ç–µ", "–æ–∫", "—Ö–æ—Ä–æ—à–æ", "–º–æ–∂–Ω–æ", "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞", "–¥–∞–≤–∞–π", "–ø–æ–≥–Ω–∞–ª–∏"]

    if any(k in last_bot_message for k in invite_keywords) and any(c in text for c in confirm_phrases):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π.\n–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    # GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"}
    ] + history[-6:] + [
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"
        print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    requests.post(url, json=payload)

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot with smart FSM is running."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
