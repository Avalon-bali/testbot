# –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ telegram_webhook()
    def send_image_once(key, filename, caption):
        if not session_flags.get(user_id, {}).get(f"{key}_photo_sent"):
            send_telegram_message(chat_id, caption, photo_path=f"AVALON/avalon-photos/{filename}")
            session_flags.setdefault(user_id, {})[f"{key}_photo_sent"] = True

    if any(w in lower_text for w in ["avalon", "–∞–≤–∞–ª–æ–Ω"]):
        send_image_once("avalon", "Avalon-reviews-and-ratings-1.jpg", "Avalon | Development & Investment. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ üëá")
    if any(w in lower_text for w in ["om", "–æ–º"]):
        send_image_once("om", "om.jpg", "OM Club House. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ üëá")
    if any(w in lower_text for w in ["buddha", "–±—É–¥–¥–∞", "–±—É–¥–∞"]):
        send_image_once("buddha", "buddha.jpg", "BUDDHA Club House. –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É üëá")
    if any(w in lower_text for w in ["tao", "—Ç–∞–æ"]):
        send_image_once("tao", "tao.jpg", "TAO Club House. –ù–∏–∂–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üëá")

    # FSM
    if user_id in lead_data:
        if "?" in text or lower_text.startswith(("–≥–¥–µ", "—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–ø–æ—á–µ–º", "–µ—Å—Ç—å –ª–∏", "–∞–¥—Ä–µ—Å", "–º–æ–∂–Ω–æ –ª–∏", "–∑–∞—á–µ–º", "–∫–æ–≥–¥–∞")):
            send_telegram_message(chat_id, "üìå –î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏–º –¥–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
            return "ok"
        lead = lead_data[user_id]
        if "name" not in lead:
            lead["name"] = text
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–≤–æ–Ω–∫–∞: WhatsApp / Telegram / Zoom / Google Meet")
            return "ok"
        elif "platform" not in lead:
            lead["platform"] = normalize_platform(text)
            if lead["platform"] == "whatsapp":
                send_telegram_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä WhatsApp")
            else:
                send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif lead.get("platform") == "whatsapp" and "phone" not in lead:
            lead["phone"] = text
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif "datetime" not in lead:
            lead["datetime"] = text
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            wa_url = f"https://wa.me/{lead.get('phone')}" if lead.get("platform") == "whatsapp" else ""
            try:
                sheet.append_row([
                    now,
                    lead.get("name"),
                    f"@{username}",
                    lead.get("platform"),
                    wa_url,
                    lead.get("datetime"),
                    "",
                    lang_code
                ])
                log_lead(user_id)
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)
            send_telegram_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ WhatsApp –≤–µ—á–µ—Ä–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è!")
            lead_data.pop(user_id, None)
            return "ok"

    # FSM –∑–∞–ø—É—Å–∫
    trigger_words = ["–∑–≤–æ–Ω–æ–∫", "—Å–æ–∑–≤–æ–Ω", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–≤—Å—Ç—Ä–µ—á–µ", "–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å"]
    confirm_phrases = [
        "–¥–∞", "–¥–∞–≤–∞–π", "–¥–∞–≤–∞–π—Ç–µ", "–æ–∫", "–æ–∫–µ", "–æ–∫–µ–π", "–º–æ–∂–Ω–æ",
        "–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º", "–∫–æ–Ω–µ—á–Ω–æ", "–∑–∞–ø–∏—Å—ã–≤–∞–π", "–≤–ø–µ—Ä–µ–¥",
        "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–µ—Ö–∞–ª–∏", "–ø–æ–≥–Ω–∞–ª–∏", "—Ö–æ—Ä–æ—à–æ", "–ø—Ä–∏—Å—Ç—É–ø–∏–º"
    ]
    last_gpt_msg = next((m["content"] for m in reversed(sessions.get(user_id, [])) if m["role"] == "assistant"), "")
    if (
        user_id not in lead_data and
        any(w in last_gpt_msg.lower() for w in trigger_words) and
        any(p in lower_text for p in confirm_phrases)
    ):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π. –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    # GPT
    send_typing_action(chat_id)
    time.sleep(1.2)

    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{load_system_prompt(lang_code)}\n\n{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot ‚úÖ FSM, GPT, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üü¢ Starting Avalon bot on port {port}")
    app.run(host="0.0.0.0", port=port)
