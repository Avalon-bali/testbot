# –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏ config ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
sessions = {}
lead_data = {}
session_flags = {}

# ... send_telegram_message(), load_documents(), load_system_prompt(), detect_project() ...

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    raw_lang = message.get("from", {}).get("language_code", "en")[:2]
    lang_code = "ru" if raw_lang == "ru" else "ua" if raw_lang == "uk" else "en"
    lower_text = text.lower()
    system_prompt = load_system_prompt(lang_code)

    print(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if not chat_id:
        return "no chat_id", 400

    if text.lower() == "/start":
        greetings = {
            "ru": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
            "ua": "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Avalon. –Ü–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –¥–æ–ø–æ–º–æ–∂—É –∑ –ø—Ä–æ—î–∫—Ç–∞–º–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏ —Ç–∞ –∂–∏—Ç—Ç—è–º –Ω–∞ –ë–∞–ª—ñ. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?",
            "en": "üëã Hello! I'm the AI assistant of Avalon. Happy to help with our projects, investments, or relocating to Bali. How can I assist you today?"
        }
        greeting = greetings.get(lang_code, greetings["en"])
        sessions[user_id] = []
        lead_data.pop(user_id, None)
        session_flags.pop(user_id, None)
        send_telegram_message(chat_id, greeting)
        return "ok"

    # Avalon: –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–¥–∏–Ω —Ä–∞–∑
    if ("avalon" in lower_text or "–∞–≤–∞–ª–æ–Ω" in lower_text) and not session_flags.get(user_id, {}).get("avalon_photo_sent"):
        photo_path = "AVALON/avalon-photos/Avalon-reviews-and-ratings-1.jpg"
        send_telegram_message(chat_id, "Avalon | Development & Investment", photo_path=photo_path)
        session_flags.setdefault(user_id, {})["avalon_photo_sent"] = True

    # FSM: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    if user_id in lead_data:
        lead = lead_data[user_id]
        if "name" not in lead:
            lead["name"] = text
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–≤–æ–Ω–∫–∞: WhatsApp / Telegram / Zoom / Google Meet")
            return "ok"
        elif "platform" not in lead:
            lead["platform"] = text
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif "datetime" not in lead:
            lead["datetime"] = text
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            wa_url = f"https://wa.me/{lead.get('phone')}" if "whatsapp" in lead.get("platform", "").lower() else ""
            try:
                sheet.append_row([
                    now,
                    lead.get("name"),
                    f"@{username}",
                    lead.get("platform"),
                    wa_url,
                    lead.get("datetime"),
                    "",  # –ø—Ä–æ–µ–∫—Ç
                    lang_code
                ])
                print("‚úÖ –õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É:", lead.get("name"))
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)
            send_telegram_message(chat_id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –Ω–∞ —Å–≤—è–∑–∏.")
            lead_data.pop(user_id, None)
            return "ok"

    # FSM –∑–∞–ø—É—Å–∫
    last_gpt_msg = next((m["content"] for m in reversed(sessions.get(user_id, [])) if m["role"] == "assistant"), "")
    if (
        user_id not in lead_data and
        "–∑–≤–æ–Ω–æ–∫" in last_gpt_msg.lower() and
        lower_text in ["–¥–∞", "–¥–∞–≤–∞–π—Ç–µ", "–æ–∫", "–º–æ–∂–Ω–æ", "–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º"]
    ):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π. –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    # GPT –æ—Ç–≤–µ—Ç
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"
        print("‚ùå GPT Error:", e)

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot with FSM and Avalon image ‚Äî OK"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üü¢ Starting Avalon bot on port {port}")
    app.run(host="0.0.0.0", port=port)
