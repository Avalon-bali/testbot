import random
from flask import Flask, request
import openai
import requests
import os
import re
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}

cancel_phrases = ["–æ—Ç–º–µ–Ω–∞", "–Ω–µ —Ö–æ—á—É", "–ø–µ—Ä–µ–¥—É–º–∞–ª", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ø–æ—Ç–æ–º", "—Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–Ω–æ"]
platforms = ["whatsapp", "telegram", "zoom", "google meet"]

final_reply_options = [
    "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –Ω–∞ —Å–≤—è–∑–∏.",
    "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
    "‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
]

def normalize_platform(text):
    t = text.lower().strip()
    if t in ["whatsapp", "–≤–æ—Ç—Å–∞–ø", "–≤–∞—Ç—Å–∞–ø"]:
        return "whatsapp"
    if t in ["telegram", "—Ç–µ–ª–µ–≥—Ä–∞–º", "—Ç–µ–ª–µ–≥–∞", "—Ç–≥"]:
        return "telegram"
    if t in ["zoom", "–∑—É–º"]:
        return "zoom"
    if t in ["google meet", "–º–∏—Ç", "–º–∏—Ç–∞–ø", "–≥—É–≥–ª –º–∏—Ç", "googlemeet"]:
        return "google meet"
    return ""

def is_confirmative_reply(text):
    confirm = ["–¥–∞", "–¥–∞–≤–∞–π—Ç–µ", "–æ–∫", "—Ö–æ—Ä–æ—à–æ", "–º–æ–∂–Ω–æ", "–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º", "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–≤ –ª—é–±–æ–π –¥–µ–Ω—å", "–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–¥–∞–≤–∞–π", "–ø–æ–≥–Ω–∞–ª–∏"]
    if any(p in text.lower() for p in confirm):
        return True
    if normalize_platform(text) in platforms:
        return True
    return False

def extract_datetime_candidate(text):
    candidates = ["–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º", "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–≤ –ª—é–±–æ–π –¥–µ–Ω—å", "–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞", "–¥–æ –æ–±–µ–¥–∞"]
    return text if any(p in text.lower() for p in candidates) else None

def load_documents():
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read())
    return "\n\n".join(context_parts)

def load_system_prompt(lang_code):
    try:
        with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
            full_text = f.read()
            match = re.search(rf"### {lang_code}\n(.*?)\n###", full_text, re.DOTALL)
            return match.group(1).strip() if match else "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."
    except:
        return "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."

def detect_project(messages):
    all_text = " ".join([m["content"].lower() for m in messages[-6:]])
    if "om" in all_text:
        return "OM"
    if "buddha" in all_text:
        return "BUDDHA"
    if "tao" in all_text:
        return "TAO"
    return ""

documents_context = load_documents()

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    raw_lang = message.get("from", {}).get("language_code", "en")[:2]
    lang_code = "ru" if raw_lang == "ru" else "ua" if raw_lang == "uk" else "en"
    lower_text = text.lower()
    system_prompt = load_system_prompt(lang_code)

    if not chat_id:
        return "no chat_id", 400

    if lower_text == "/start":
        greetings = {
            "ru": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
            "ua": "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Avalon. –Ü–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –¥–æ–ø–æ–º–æ–∂—É –∑ –ø—Ä–æ—î–∫—Ç–∞–º–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏ —Ç–∞ –∂–∏—Ç—Ç—è–º –Ω–∞ –ë–∞–ª—ñ. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?",
            "en": "üëã Hello! I'm the AI assistant of Avalon. Happy to help with our projects, investments, or relocating to Bali. How can I assist you today?"
        }
        greeting = greetings.get(lang_code, greetings["en"])
        sessions[user_id] = []
        lead_data.pop(user_id, None)
        send_telegram_message(chat_id, greeting)
        return "ok"

    if user_id in lead_data and lower_text in cancel_phrases:
        lead_data.pop(user_id, None)
        send_telegram_message(chat_id, "üëå –•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ.")
        return "ok"

    # FSM –ª–æ–≥–∏–∫–∞ (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö) ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏...

    # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"
        print("‚ùå GPT Error:", e)

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

def send_telegram_message(chat_id, text, photo_path=None):
    if photo_path and os.path.exists(photo_path):
        url_photo = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        with open(photo_path, 'rb') as photo:
            files = {'photo': photo}
            data = {
                'chat_id': chat_id,
                'caption': text,
                'parse_mode': 'Markdown'
            }
            requests.post(url_photo, files=files, data=data)
    else:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        requests.post(url, json=payload)

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot with full image support and dynamic ending."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üü¢ Starting Avalon bot on port {port}")
    app.run(host="0.0.0.0", port=port)
