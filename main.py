import os
import json
import random
from datetime import datetime
from flask import Flask, request
import openai
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

# ======================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–ë–ï–ó–û–ü–ê–°–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï)
# ======================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # 1. –î–æ–±–∞–≤—å—Ç–µ –≤ Environment Variables –Ω–∞ Render
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEETS_KEY = os.getenv("GOOGLE_SHEETS_KEY")  # ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")  # 2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–µ—Å—å JSON –∏–∑ google-credentials.json

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, GOOGLE_CREDS_JSON]):
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

openai.api_key = OPENAI_API_KEY

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í
# ======================
sessions = {}
lead_progress = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(GOOGLE_CREDS_JSON), scope)
gc = gspread.authorize(creds)
sheet = gc.open_by_key(GOOGLE_SHEETS_KEY).sheet1

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================
def load_documents():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ docs"""
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read()[:3000])
    return "\n\n".join(context_parts)

def load_system_prompt():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
        return f.read()

documents_context = load_documents()
system_prompt = load_system_prompt()

def get_welcome_text(language):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
    welcome_texts = {
        "ru": (
            "üëã _–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!_\n\n"
            "**–Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ Avalon.**\n\n"
            "–ü–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö üè° **OM / BUDDHA / TAO** –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –º–µ—á—Ç—ã üèùÔ∏è.\n\n"
            "–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
        ),
        "uk": (
            "üëã _–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!_\n\n"
            "**–Ø ‚Äî AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥–¥—ñ–ª—É –ø—Ä–æ–¥–∞–∂—ñ–≤ Avalon.**\n\n"
            "–î–æ–ø–æ–º–æ–∂—É –≤–∞–º –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ üè° **OM / BUDDHA / TAO** —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó –Ω–∞ –æ—Å—Ç—Ä–æ–≤—ñ –º—Ä—ñ—ó üèùÔ∏è.\n\n"
            "–ü–∏—Ç–∞–π—Ç–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!"
        ),
        "id": (
            "üëã _Selamat datang!_\n\n"
            "**Saya adalah asisten AI dari tim penjualan Avalon.**\n\n"
            "Saya akan membantu Anda tentang proyek kami üè° **OM / BUDDHA / TAO** dan investasi di Bali üèùÔ∏è.\n\n"
            "Silakan tanya apa saja!"
        )
    }
    return welcome_texts.get(language[:2], 
        "üëã _Welcome!_\n\n"
        "**I am the AI sales assistant of Avalon.**\n\n"
        "I can help you with our projects üè° **OM / BUDDHA / TAO** and investments on the dream island üèùÔ∏è.\n\n"
        "Feel free to ask me anything!"
    )

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)

# ======================
# –í–ï–ë–•–£–ö–ò
# ======================
@app.route(f"/webhook", methods=["POST"])
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != os.getenv("WEBHOOK_SECRET"):
        return "Unauthorized", 401

    data = request.get_json()
    if not data:
        return "Bad Request", 400

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@app.route("/", methods=["GET"])
def home():
    return "Avalon GPT —Ä–∞–±–æ—Ç–∞–µ—Ç. FSM –∏ –ª–∏–¥—ã –∞–∫—Ç–∏–≤–Ω—ã."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
