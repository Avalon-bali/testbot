import random
import os
import re
import time
import csv
import requests
import openai
import gspread
from flask import Flask, request
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}
session_flags = {}

def normalize_platform(text):
    t = text.lower().strip()
    if t in ["whatsapp", "–≤–æ—Ç—Å–∞–ø", "–≤–∞—Ç—Å–∞–ø"]:
        return "whatsapp"
    if t in ["telegram", "—Ç–µ–ª–µ–≥—Ä–∞–º", "—Ç–≥"]:
        return "telegram"
    if t in ["zoom", "–∑—É–º"]:
        return "zoom"
    if t in ["google meet", "–≥—É–≥–ª –º–∏—Ç", "–º–∏—Ç", "–º–∏—Ç–∞–ø", "googlemeet"]:
        return "google meet"
    return t

def send_typing_action(chat_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendChatAction"
    requests.post(url, json={"chat_id": chat_id, "action": "typing"})

def send_telegram_message(chat_id, text, photo_path=None):
    send_typing_action(chat_id)
    time.sleep(1)

    if photo_path:
        if os.path.exists(photo_path):
            url_photo = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    'chat_id': chat_id,
                    'caption': text if text else None,
                    'parse_mode': 'Markdown'
                }
                if not text:
                    del data["caption"]
                requests.post(url_photo, files=files, data=data)
        else:
            send_telegram_message(chat_id, text + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        requests.post(url, json=payload)

def send_image_once(user_id, chat_id, key, filename, caption):
    if not session_flags.get(user_id, {}).get(f"{key}_photo_sent"):
        send_telegram_message(chat_id, caption, photo_path=f"AVALON/avalon-photos/{filename}")
        session_flags.setdefault(user_id, {})[f"{key}_photo_sent"] = True

def log_dialog(user_id):
    now = datetime.now()
    with open("dialogs.csv", "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([user_id, now.strftime("%Y-%m-%d %H:%M:%S")])

def log_lead(user_id):
    now = datetime.now()
    with open("leads.csv", "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([user_id, now.strftime("%Y-%m-%d %H:%M:%S")])

def count_by_period(file_path):
    today = datetime.now().date()
    this_month = today.replace(day=1)
    total, today_count, month_count = 0, 0, 0
    if not os.path.exists(file_path):
        return (0, 0, 0)
    with open(file_path, "r") as f:
        for row in csv.reader(f):
            if len(row) < 2:
                continue
            try:
                ts = datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S")
            except ValueError:
                continue
            total += 1
            if ts.date() == today:
                today_count += 1
            if ts.date() >= this_month:
                month_count += 1
    return today_count, month_count, total

def load_documents():
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read())
    return "\n\n".join(context_parts)

def load_system_prompt(lang_code):
    try:
        with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
            full_text = f.read()
            match = re.search(rf"### {lang_code}\n(.*?)\n###", full_text, re.DOTALL)
            return match.group(1).strip() if match else "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."
    except:
        return "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Avalon."

documents_context = load_documents()

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    raw_lang = message.get("from", {}).get("language_code", "en")[:2]
    lang_code = "ru" if raw_lang == "ru" else "ua" if raw_lang == "uk" else "en"
    lower_text = text.lower()
    system_prompt = load_system_prompt(lang_code)

    if not chat_id:
        return "no chat_id", 400

    if lower_text == "/start":
        log_dialog(user_id)
        greetings = {
            "ru": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
            "ua": "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Avalon. –Ü–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –¥–æ–ø–æ–º–æ–∂—É –∑ –ø—Ä–æ—î–∫—Ç–∞–º–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏ —Ç–∞ –∂–∏—Ç—Ç—è–º –Ω–∞ –ë–∞–ª—ñ. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?",
            "en": "üëã Hello! I'm the AI assistant of Avalon. Happy to help with our projects, investments, or relocating to Bali. How can I assist you today?"
        }
        greeting = greetings.get(lang_code, greetings["en"])
        sessions[user_id] = []
        lead_data.pop(user_id, None)
        session_flags.pop(user_id, None)
        send_telegram_message(chat_id, greeting)
        return "ok"

    if lower_text == "/admin stats":
        d_today, d_month, d_total = count_by_period("dialogs.csv")
        l_today, l_month, l_total = count_by_period("leads.csv")
        stats = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"*–î–∏–∞–ª–æ–≥–æ–≤:*\n- —Å–µ–≥–æ–¥–Ω—è: {d_today}\n- –∑–∞ –º–µ—Å—è—Ü: {d_month}\n- –≤—Å–µ–≥–æ: {d_total}\n\n"
            f"*–õ–∏–¥–æ–≤:*\n- —Å–µ–≥–æ–¥–Ω—è: {l_today}\n- –∑–∞ –º–µ—Å—è—Ü: {l_month}\n- –≤—Å–µ–≥–æ: {l_total}"
        )
        send_telegram_message(chat_id, stats)
        return "ok"

    # –ö–∞—Ä—Ç–∏–Ω–∫–∏
    if any(w in lower_text for w in ["avalon", "–∞–≤–∞–ª–æ–Ω"]):
        send_image_once(user_id, chat_id, "avalon", "Avalon-reviews-and-ratings-1.jpg", "Avalon | Development & Investment. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ üëá")
    if any(w in lower_text for w in ["om", "–æ–º"]):
        send_image_once(user_id, chat_id, "om", "om.jpg", "OM Club House. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ üëá")
    if any(w in lower_text for w in ["buddha", "–±—É–¥–¥–∞", "–±—É–¥–∞"]):
        send_image_once(user_id, chat_id, "buddha", "buddha.jpg", "BUDDHA Club House. –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É üëá")
    if any(w in lower_text for w in ["tao", "—Ç–∞–æ"]):
        send_image_once(user_id, chat_id, "tao", "tao.jpg", "TAO Club House. –ù–∏–∂–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üëá")

    # FSM
    if user_id in lead_data:
        if "?" in text or lower_text.startswith(("–≥–¥–µ", "—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–ø–æ—á–µ–º", "–µ—Å—Ç—å –ª–∏", "–∞–¥—Ä–µ—Å", "–º–æ–∂–Ω–æ –ª–∏", "–∑–∞—á–µ–º", "–∫–æ–≥–¥–∞")):
            send_telegram_message(chat_id, "üìå –î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏–º –¥–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
            return "ok"
        lead = lead_data[user_id]
        if "name" not in lead:
            lead["name"] = text
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–≤–æ–Ω–∫–∞: WhatsApp / Telegram / Zoom / Google Meet")
            return "ok"
        elif "platform" not in lead:
            lead["platform"] = normalize_platform(text)
            if lead["platform"] == "whatsapp":
                send_telegram_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä WhatsApp")
            else:
                send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif lead.get("platform") == "whatsapp" and "phone" not in lead:
            lead["phone"] = text
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            return "ok"
        elif "datetime" not in lead:
            lead["datetime"] = text
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            wa_url = f"https://wa.me/{lead.get('phone')}" if lead.get("platform") == "whatsapp" else ""
            try:
                sheet.append_row([
                    now,
                    lead.get("name"),
                    f"@{username}",
                    lead.get("platform"),
                    wa_url,
                    lead.get("datetime"),
                    "",
                    lang_code
                ])
                log_lead(user_id)
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)
            send_telegram_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ WhatsApp –≤–µ—á–µ—Ä–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è!")
            lead_data.pop(user_id, None)
            return "ok"

    trigger_words = ["–∑–≤–æ–Ω–æ–∫", "—Å–æ–∑–≤–æ–Ω", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–≤—Å—Ç—Ä–µ—á–µ", "–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å"]
    confirm_phrases = [
        "–¥–∞", "–¥–∞–≤–∞–π", "–¥–∞–≤–∞–π—Ç–µ", "–æ–∫", "–æ–∫–µ", "–æ–∫–µ–π", "–º–æ–∂–Ω–æ",
        "–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º", "–∫–æ–Ω–µ—á–Ω–æ", "–∑–∞–ø–∏—Å—ã–≤–∞–π", "–≤–ø–µ—Ä–µ–¥",
        "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–µ—Ö–∞–ª–∏", "–ø–æ–≥–Ω–∞–ª–∏", "—Ö–æ—Ä–æ—à–æ", "–ø—Ä–∏—Å—Ç—É–ø–∏–º"
    ]
    last_gpt_msg = next((m["content"] for m in reversed(sessions.get(user_id, [])) if m["role"] == "assistant"), "")
    if (
        user_id not in lead_data and
        any(w in last_gpt_msg.lower() for w in trigger_words) and
        any(p in lower_text for p in confirm_phrases)
    ):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π. –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    # GPT
    send_typing_action(chat_id)
    time.sleep(1.2)
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{load_system_prompt(lang_code)}\n\n{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = response.choices[0].message.content.strip()
        reply = re.sub(r"\*\*(.*?)\*\*", r"\1", reply)
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Avalon bot ‚úÖ full features"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üü¢ Starting Avalon bot on port {port}")
    app.run(host="0.0.0.0", port=port)
