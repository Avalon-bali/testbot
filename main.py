@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "")
    language_code = message.get("from", {}).get("language_code", "en")
    username = message.get("from", {}).get("username", "")

    if not chat_id:
        return "no chat_id", 400

    now = time.time()
    last_time = last_message_time.get(user_id, 0)
    if now - last_time < 1:
        return "rate limit", 429
    last_message_time[user_id] = now

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if text.strip() == "/leads":
        if user_id != ADMIN_ID:
            send_telegram_message(chat_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return "ok"
        try:
            rows = sheet.get_all_values()
            last = rows[-3:] if len(rows) >= 3 else rows[-len(rows):]
            messages = []
            for r in last:
                messages.append(
                    f"*–ò–º—è:* {r[1]}\n"
                    f"*Telegram:* {r[2]}\n"
                    f"*WhatsApp:* {r[3]}\n"
                    f"*–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞:* {r[4]} {r[5]}\n"
                    f"*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {r[6]}\n"
                    f"*–ü—Ä–æ–µ–∫—Ç:* {r[7]}\n"
                    f"*–Ø–∑—ã–∫:* {r[8]}"
                )
            for m in messages:
                send_telegram_message(chat_id, m)
        except Exception as e:
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤: {e}")
        return "ok"

    if text.startswith("/addprompt "):
        if user_id != ADMIN_ID:
            send_telegram_message(chat_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return "ok"
        addition = text[len("/addprompt "):].strip()
        try:
            with open("docs/system_prompt.txt", "a", encoding="utf-8") as f:
                f.write("\n" + addition)
            global system_prompt
            system_prompt = load_system_prompt()
            send_telegram_message(chat_id, "‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ system prompt.")
        except Exception as e:
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ prompt: {e}")
        return "ok"

    if text.strip() == "/prompt":
        if user_id != ADMIN_ID:
            send_telegram_message(chat_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return "ok"
        try:
            with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
                current_prompt = f.read()
            if len(current_prompt) > 4000:
                send_telegram_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            else:
                send_telegram_message(chat_id, f"üìù –¢–µ–∫—É—â–∏–π prompt:\n\n{current_prompt}")
        except Exception as e:
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ prompt: {e}")
        return "ok"

    # FSM ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å
    if user_id in fsm_state:
        step = fsm_state[user_id]
        answer = text.strip()
        if step == "ask_name":
            lead_data[user_id]["name"] = answer
            fsm_state[user_id] = "ask_platform"
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–≤—è–∑–∏: WhatsApp / Telegram / Zoom / Google Meet")
            return "ok"
        elif step == "ask_platform":
            lead_data[user_id]["platform"] = answer
            if any(w in answer.lower() for w in ["whatsapp", "–≤–∞—Ç—Å–∞–ø", "–≤–æ—Ç—Å–∞–ø"]):
                fsm_state[user_id] = "ask_phone"
                send_telegram_message(chat_id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp:")
            else:
                fsm_state[user_id] = "ask_datetime"
                send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 16:00)")
            return "ok"
        elif step == "ask_phone":
            lead_data[user_id]["phone"] = answer
            fsm_state[user_id] = "ask_datetime"
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 16:00)")
            return "ok"
        elif step == "ask_datetime":
            lead_data[user_id]["datetime"] = answer
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
            try:
                now = datetime.now().strftime("%Y-%m-%d %H:%M")
                date_part = answer.split()[0] if len(answer.split()) > 0 else ""
                time_part = answer.split()[1] if len(answer.split()) > 1 else ""
                sheet.append_row([
                    now,
                    lead_data[user_id].get("name", ""),
                    f"@{username}",
                    lead_data[user_id].get("phone", ""),
                    date_part,
                    time_part,
                    lead_data[user_id].get("platform", ""),
                    "",  # –ø—Ä–æ–µ–∫—Ç
                    language_code
                ])
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                time_text = detect_time_of_day(answer)
                send_telegram_message(chat_id, f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ {time_text}.")
            except Exception as e:
                send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            fsm_state.pop(user_id)
            lead_data.pop(user_id)
            return "ok"

    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç –ø—Ä–æ –∑–≤–æ–Ω–æ–∫ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º FSM
    if "–∑–≤–æ–Ω–æ–∫" in text.lower() or "—Å–æ–∑–≤–æ–Ω" in text.lower() or "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü" in text.lower():
        fsm_state[user_id] = "ask_name"
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "üëã –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:")
        return "ok"

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    sessions.setdefault(user_id, [])
    history = sessions[user_id][-6:]

    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"}
    ] + history + [
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    sessions[user_id] = (history + [
        {"role": "user", "content": text},
        {"role": "assistant", "content": reply}
    ])[-10:]

    send_telegram_message(chat_id, reply)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords = ["–∞–≤–∞–ª–æ–Ω", "avalon", "–æ–º", "buddha", "budda", "tao"]
    if any(k in text.lower() for k in keywords):
        logo = find_logo()
        if logo:
            send_telegram_photo(chat_id, logo, caption="Avalon ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –ë–∞–ª–∏ üå¥")

    return "ok"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –¥–Ω—è
def detect_time_of_day(text):
    text = text.lower()
    if "—É—Ç—Ä–æ" in text:
        return "—É—Ç—Ä–æ–º"
    if "–≤–µ—á–µ—Ä" in text:
        return "–≤–µ—á–µ—Ä–æ–º"
    if "–¥–µ–Ω—å" in text:
        return "–¥–Ω—ë–º"
    return "–≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è"

@app.route("/", methods=["GET"])
def home():
    return "Avalon GPT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
