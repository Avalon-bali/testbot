from flask import Flask, request, send_from_directory
import openai
import requests
import os
import re
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}

call_request_triggers = [
    "—Å–æ–∑–≤–æ–Ω", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ö–æ—á—É –∑–≤–æ–Ω–æ–∫", "–º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
    "–∑–≤–æ–Ω–æ–∫", "–¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è", "–æ–±—Å—É–¥–∏—Ç—å", "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"
]

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

def send_telegram_photo(chat_id, photo_url, caption=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    payload = {"chat_id": chat_id, "photo": photo_url}
    if caption:
        payload["caption"] = caption
        payload["parse_mode"] = "Markdown"
    requests.post(url, json=payload)

def get_lang(code):
    return "ru" if code in ["ru", "uk"] else "en"

def extract_lead_data_from_text(text):
    data = {}
    text_l = text.lower().strip()

    match = re.search(r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|—è|—ç—Ç–æ|–∏–º—è)\s+([–∞-—èa-z\-]+)", text_l)
    if match:
        data["name"] = match.group(2).capitalize()

    if len(text.split()) == 1 and text.isalpha() and len(text) <= 15:
        data["name"] = text.capitalize()

    if any(w in text_l for w in ["whatsapp", "–≤–∞—Ç—Å–∞–ø", "–≤–æ—Ç—Å–∞–ø", "–≤–∞—Ç —Å–∞–ø", "–≤–æ—Ç —Å–∞–ø"]):
        data["platform"] = "WhatsApp"
    elif "telegram" in text_l or "—Ç–µ–ª–µ–≥—Ä–∞–º" in text_l:
        data["platform"] = "Telegram"
    elif "zoom" in text_l or "–∑—É–º" in text_l:
        data["platform"] = "Zoom"
    elif "google meet" in text_l or "–≥—É–≥–ª –º–∏—Ç" in text_l:
        data["platform"] = "Google Meet"

    phone_match = re.search(r"\+?\d{7,}", text)
    if phone_match:
        data["phone"] = phone_match.group(0)

    if any(w in text_l for w in ["–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "–≤", ":"]):
        data["datetime"] = text.strip()

    return data

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    lang_code = message.get("from", {}).get("language_code", "en")
    lang = get_lang(lang_code)

    if not chat_id:
        return "no chat_id", 400

    if text == "/start":
        sessions[user_id] = []
        welcome = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon.\n–†–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
        send_telegram_message(chat_id, welcome)
        return "ok"

    if user_id not in lead_data and any(w in text.lower() for w in call_request_triggers):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\nüëã –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    if user_id in lead_data:
        lead = lead_data.get(user_id, {})

        if not lead.get("name") and "platform" in lead:
            send_telegram_message(chat_id, "üëã –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
            return "ok"
        elif not lead.get("platform"):
            send_telegram_message(chat_id, "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: WhatsApp / Telegram / Zoom / Google Meet")
            lead.update(extract_lead_data_from_text(text))
            lead_data[user_id] = lead
            return "ok"
        elif lead.get("platform", "").lower() == "whatsapp" and not lead.get("phone"):
            send_telegram_message(chat_id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp:")
            lead.update(extract_lead_data_from_text(text))
            lead_data[user_id] = lead
            return "ok"
        elif not lead.get("datetime"):
            send_telegram_message(chat_id, "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?")
            lead.update(extract_lead_data_from_text(text))
            lead_data[user_id] = lead
            return "ok"

        # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
        lead.update(extract_lead_data_from_text(text))
        lead_data[user_id] = lead

        required_fields = ["name", "platform", "datetime"]
        if lead.get("platform") == "WhatsApp":
            required_fields.append("phone")

        if all(lead.get(field) for field in required_fields):
            datetime_raw = lead.get("datetime", "").strip()
            parts = datetime_raw.split()
            date_part = parts[0] if len(parts) >= 1 else ""
            time_part = parts[1] if len(parts) >= 2 else ""

            now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
            try:
                sheet.append_row([
                    now_str,
                    lead.get("name", ""),
                    f"@{username}",
                    lead.get("phone", ""),
                    date_part,
                    time_part,
                    lead.get("platform", ""),
                    "",
                    lang_code
                ])
                send_telegram_message(chat_id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e)
                send_telegram_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            lead_data.pop(user_id, None)
            return "ok"

    return "ok"

@app.route("/AVALON/<path:filename>")
def serve_avalon_static(filename):
    return send_from_directory("AVALON", filename)

@app.route("/")
def home():
    return "Avalon AI –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
