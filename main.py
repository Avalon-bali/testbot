from flask import Flask, request
import openai
import requests
import os
import random
import gspread
import json
from datetime import datetime
from google.oauth2.service_account import Credentials  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

app = Flask(__name__)

TELEGRAM_TOKEN = "7942085031:AAERWupDOXiDvqA1LE-EWTE8JM9n3Qa0v44"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

sessions = {}
lead_progress = {}

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("/etc/secrets/google-credentials.json", scopes=scope)  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
gc = gspread.authorize(creds)
sheet = gc.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

def load_documents():
    folder = "docs"
    context_parts = []
    for filename in os.listdir(folder):
        if filename.endswith(".txt") and filename != "system_prompt.txt":
            with open(os.path.join(folder, filename), "r", encoding="utf-8") as f:
                context_parts.append(f.read()[:3000])
    return "\n\n".join(context_parts)

def load_system_prompt():
    with open("docs/system_prompt.txt", "r", encoding="utf-8") as f:
        return f.read()

documents_context = load_documents()
system_prompt = load_system_prompt()

def get_welcome_text(language):
    if language and language.startswith("ru"):
        return (
            "üëã _–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!_\n\n"
            "**–Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ Avalon.**\n\n"
            "–ü–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö üè° **OM / BUDDHA / TAO** –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –º–µ—á—Ç—ã üèùÔ∏è.\n\n"
            "–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
        )
    elif language and language.startswith("uk"):
        return (
            "üëã _–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!_\n\n"
            "**–Ø ‚Äî AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥–¥—ñ–ª—É –ø—Ä–æ–¥–∞–∂—ñ–≤ Avalon.**\n\n"
            "–î–æ–ø–æ–º–æ–∂—É –≤–∞–º –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ üè° **OM / BUDDHA / TAO** —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó –Ω–∞ –æ—Å—Ç—Ä–æ–≤—ñ –º—Ä—ñ—ó üèùÔ∏è.\n\n"
            "–ü–∏—Ç–∞–π—Ç–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!"
        )
    elif language and language.startswith("id"):
        return (
            "üëã _Selamat datang!_\n\n"
            "**Saya adalah asisten AI dari tim penjualan Avalon.**\n\n"
            "Saya akan membantu Anda tentang proyek kami üè° **OM / BUDDHA / TAO** dan investasi di Bali üèùÔ∏è.\n\n"
            "Silakan tanya apa saja!"
        )
    else:
        return (
            "üëã _Welcome!_\n\n"
            "**I am the AI sales assistant of Avalon.**\n\n"
            "I can help you with our projects üè° **OM / BUDDHA / TAO** and investments on the dream island üèùÔ∏è.\n\n"
            "Feel free to ask me anything!"
        )

def find_logo_or_random(folder):
    files = []
    logos = []
    for f in os.listdir(folder):
        if f.lower().endswith((".jpg", ".jpeg", ".png")):
            files.append(f)
            if "logo" in f.lower():
                logos.append(f)
    if logos:
        return os.path.join(folder, random.choice(logos))
    if files:
        return os.path.join(folder, random.choice(files))
    return None

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    response = requests.post(url, json=payload)
    print("üî¥ –û—Ç–≤–µ—Ç Telegram –Ω–∞ sendMessage:", response.text)

def send_telegram_local_photo(chat_id, photo_path, caption=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    with open(photo_path, "rb") as photo_file:
        files = {"photo": photo_file}
        data = {"chat_id": chat_id}
        if caption:
            data["caption"] = caption
            data["parse_mode"] = "Markdown"
        response = requests.post(url, data=data, files=files)
        print("üî¥ –û—Ç–≤–µ—Ç Telegram –Ω–∞ sendPhoto:", response.text)

def is_meaningful_reply(expected_question, user_reply):
    check_prompt = f"–¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫. –¢—ã –∑–∞–¥–∞–ª –∫–ª–∏–µ–Ω—Ç—É –≤–æ–ø—Ä–æ—Å: '{expected_question}'\n\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: '{user_reply}'\n\n–≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å? –û—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
    try:
        check_response = openai.ChatCompletion.create(  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            model="gpt-4o",
            messages=[{"role": "user", "content": check_prompt}]
        )
        check_answer = check_response.choices[0].message.content.strip().lower()
        return check_answer.startswith("–¥–∞")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–º—ã—Å–ª–∞ –æ—Ç–≤–µ—Ç–∞:", e)
        return False

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    print("üîî –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:", data)

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    username = message.get("from", {}).get("username", "")
    language = message.get("from", {}).get("language_code", "en")
    first_name = message.get("from", {}).get("first_name", "")
    text = message.get("text", "")

    print(f"üì® chat_id: {chat_id}, —Ç–µ–∫—Å—Ç: {text}")

    if not chat_id:
        return "no chat_id", 400

    if text and text.strip().lower() in ["/start"]:
        sessions[user_id] = []
        lead_progress.pop(user_id, None)

        welcome_text = get_welcome_text(language)
        send_telegram_message(chat_id, welcome_text)

        avalon_folder = "docs/AVALON"
        if os.path.exists(avalon_folder):
            logo_or_random = find_logo_or_random(avalon_folder)
            if logo_or_random:
                send_telegram_local_photo(chat_id, logo_or_random, caption="Avalon ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –ë–∞–ª–∏ üå¥")

        return "ok"

    if user_id in lead_progress:
        lead = lead_progress[user_id]
        stage = lead["stage"]

        if stage == "platform":
            if is_meaningful_reply("–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ Zoom, Google Meet –∏–ª–∏ WhatsApp?", text):
                lead["platform"] = text
                if "whatsapp" in text.lower():
                    lead["stage"] = "whatsapp_number"
                    send_telegram_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä WhatsApp, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.")
                else:
                    lead["stage"] = "name"
                    send_telegram_message(chat_id, "–ö–∞–∫ –º–Ω–µ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?")
                return "ok"
            else:
                sessions[user_id] = sessions.get(user_id, [])
                return "ok"

        if stage == "whatsapp_number":
            if is_meaningful_reply("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä WhatsApp, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.", text):
                lead["contact"] = text
                lead["stage"] = "name"
                send_telegram_message(chat_id, "–ö–∞–∫ –º–Ω–µ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?")
                return "ok"
            else:
                sessions[user_id] = sessions.get(user_id, [])
                return "ok"

        if stage == "name":
            if is_meaningful_reply("–ö–∞–∫ –º–Ω–µ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?", text):
                lead["name"] = text
                if lead["platform"].lower() in ["zoom", "google meet", "meet"]:
                    lead["stage"] = "link_contact"
                    send_telegram_message(chat_id, "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å—é–¥–∞, –≤ —ç—Ç–æ—Ç —á–∞—Ç ‚Äî –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?")
                else:
                    lead["stage"] = "datetime"
                    send_telegram_message(chat_id, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º ‚Äî –∫–∞–∫ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?")
                return "ok"
            else:
                sessions[user_id] = sessions.get(user_id, [])
                return "ok"

        if stage == "link_contact":
            if is_meaningful_reply("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å—é–¥–∞, –≤ —ç—Ç–æ—Ç —á–∞—Ç ‚Äî –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?", text):
                if any(x in text.lower() for x in ["telegram", "—Ç–≥", "—Å—é–¥–∞", "–∑–¥–µ—Å—å", "–≤ —ç—Ç–æ–º —á–∞—Ç–µ"]):
                    lead["contact"] = f"Telegram @{username or first_name}"
                else:
                    lead["contact"] = text
                lead["stage"] = "datetime"
                send_telegram_message(chat_id, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º ‚Äî –∫–∞–∫ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?")
                return "ok"
            else:
                sessions[user_id] = sessions.get(user_id, [])
                return "ok"

        if stage == "datetime":
            if is_meaningful_reply("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º ‚Äî –∫–∞–∫ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?", text):
                lead["time"] = text
                for project in ["OM", "TAO", "BUDDHA"]:
                    if project.lower() in text.lower():
                        lead["project"] = project
                row = [
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    lead.get("name", first_name),
                    str(user_id),
                    lead.get("contact", f"Telegram @{username or first_name}"),
                    lead.get("platform", ""),
                    lead.get("time", ""),
                    lead.get("project", "‚Äî"),
                    language
                ]
                sheet.append_row(row)
                send_telegram_message(chat_id, f"‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ {lead.get('platform', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª')} –≤ –±–ª–∏–∂–∞–π—à–µ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                lead_progress.pop(user_id)
                return "ok"
            else:
                sessions[user_id] = sessions.get(user_id, [])
                return "ok"

    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{system_prompt}\n\n{documents_context}"}
    ] + history[-2:] + [{"role": "user", "content": text}]

    try:
        response = openai.ChatCompletion.create(  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n\n{e}"
        print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)

    sessions[user_id] = (history + [{"role": "user", "content": text}, {"role": "assistant", "content": reply}])[-6:]

    if any(word in text.lower() for word in ["–∑–≤–æ–Ω–æ–∫", "—Å–æ–∑–≤–æ–Ω", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è"]):
        lead_progress[user_id] = {"stage": "platform"}
        send_telegram_message(chat_id, "–•–æ—Ä–æ—à–æ! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ Zoom, Google Meet –∏–ª–∏ WhatsApp?")
        return "ok"

    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Avalon GPT —Ä–∞–±–æ—Ç–∞–µ—Ç. FSM –∏ –ª–∏–¥—ã –∞–∫—Ç–∏–≤–Ω—ã."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
