from flask import Flask, request, send_from_directory
import openai
import requests
import os
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}
lang_overrides = {}

call_request_triggers = [
    "—Å–æ–∑–≤–æ–Ω", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ö–æ—á—É –∑–≤–æ–Ω–æ–∫", "–º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
    "–∑–≤–æ–Ω–æ–∫", "–¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è", "–æ–±—Å—É–¥–∏—Ç—å", "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"
]

system_prompt = """
–¢—ã ‚Äî AI Assistant –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∫–æ–º–ø–∞–Ω–∏–∏ Avalon, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π—Å—è –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –ë–∞–ª–∏.
–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã: Avalon, –ø—Ä–æ–µ–∫—Ç—ã OM, BUDDHA, TAO, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –ë–∞–ª–∏, –ø–µ—Ä–µ–µ–∑–¥, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —ç—Ç–∞–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º Avalon.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –Ω–æ —á–µ—Å—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç—ã ‚Äî AI Assistant.
"""

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

def detect_lang(text):
    lower = text.lower()
    if any(word in lower for word in ["hello", "can you", "speak english"]):
        return "en"
    elif any(word in lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏"]):
        return "ru"
    elif any(word in lower for word in ["–ø—Ä–∏–≤—ñ—Ç", "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"]):
        return "uk"
    return None

def resolve_lang(lang_code, user_id, text):
    override = detect_lang(text)
    if override:
        lang_overrides[user_id] = override
        return override
    if user_id in lang_overrides:
        return lang_overrides[user_id]
    return lang_code if lang_code in ["ru", "uk"] else "en"

def get_welcome_message(lang):
    return {
        "ru": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon.\n–†–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –ë–∞–ª–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        "uk": "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Avalon.\n–ó —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏ Avalon —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó –Ω–∞ –ë–∞–ª—ñ!",
        "en": "üëã Hello! I'm the AI assistant of Avalon.\nI can help you with our projects, investments, and life in Bali. How can I assist you?"
    }.get(lang, "en")

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")
    lang_code = message.get("from", {}).get("language_code", "en")
    lang = resolve_lang(lang_code, user_id, text)

    if not chat_id:
        return "no chat_id", 400

    if text == "/start":
        sessions[user_id] = []
        send_telegram_message(chat_id, get_welcome_message(lang))
        return "ok"

    # GPT reply only
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": system_prompt},
        *history[-6:],
        {"role": "user", "content": text}
    ]

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå GPT error:", e)
        reply = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    if any(kw in text.lower() for kw in ["–æ–º", "om", "buddha", "—Ç–∞—É", "–∞–≤–∞–ª–æ–Ω", "–ø—Ä–æ–µ–∫—Ç", "–±–∞–ª–∏"]):
        sessions[user_id] = history + [{"role": "user", "content": text}, {"role": "assistant", "content": reply}]
        send_telegram_message(chat_id, reply)
    else:
        warning = {
            "ru": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ Avalon –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –Ω–∞ –ë–∞–ª–∏.",
            "uk": "–í–∏–±–∞—á—Ç–µ, —è –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ª–∏—à–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ Avalon —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π –Ω–∞ –ë–∞–ª—ñ.",
            "en": "Sorry, I can only answer questions related to Avalon and Bali real estate investments."
        }
        send_telegram_message(chat_id, warning.get(lang, warning["en"]))

    return "ok"

@app.route("/")
def home():
    return "Avalon AI bot running."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
