from flask import Flask, request, send_from_directory
import openai
import requests
import os
import re
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/google-credentials.json", scope)
gsheet = gspread.authorize(creds)
sheet = gsheet.open_by_key("1rJSFvD9r3yTxnl2Y9LFhRosAbr7mYF7dYtgmg9VJip4").sheet1

sessions = {}
lead_data = {}

call_request_triggers = [
    "—Å–æ–∑–≤–æ–Ω", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ö–æ—á—É –∑–≤–æ–Ω–æ–∫", "–º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å",
    "–∑–≤–æ–Ω–æ–∫", "–¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è", "–æ–±—Å—É–¥–∏—Ç—å", "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"
]

system_prompt_template = {
    "ru": (
        "–¢—ã ‚Äî AI Assistant –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. "
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã: –ø—Ä–æ–µ–∫—Ç—ã Avalon, OM, BUDDHA, TAO, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ë–∞–ª–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏—Å—å. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. "
        "üì• –¢—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –≤ `docs/*.txt`. "
        "–û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ PDF, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –≤—Å—Ç–∞–≤—å –µ—ë, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."
    ),
    "uk": (
        "–¢–∏ ‚Äî AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥–¥—ñ–ª—É –ø—Ä–æ–¥–∞–∂—ñ–≤ –∫–æ–º–ø–∞–Ω—ñ—ó Avalon. "
        "–¢–∏ –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ª–∏—à–µ –Ω–∞ —Ç–µ–º–∏: –ø—Ä–æ—î–∫—Ç–∏ Avalon, OM, BUDDHA, TAO, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó, –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –Ω–∞ –ë–∞–ª—ñ. "
        "–Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø–æ —Ç–µ–º—ñ ‚Äî –≤–≤—ñ—á–ª–∏–≤–æ –≤—ñ–¥–º–æ–≤. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä. "
        "üì• –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ç–µ–∫—Å—Ç—ñ–≤ —É `docs/*.txt`. "
        "–ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ü–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î –ø—Ä–æ PDF, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é —á–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è ‚Äî –≤—Å—Ç–∞–≤ –π–æ–≥–æ, —è–∫—â–æ –≤–æ–Ω–æ —î."
    ),
    "en": (
        "You are the AI Assistant of the Avalon sales team. "
        "You may only answer questions related to: Avalon projects, OM, BUDDHA, TAO, investments, real estate in Bali. "
        "If the question is off-topic ‚Äî politely decline. Answer like a professional sales manager. "
        "üì• Always use content from the `docs/*.txt` files. "
        "Pay attention to links in those texts. If the user asks for a PDF, brochure or link ‚Äî include it if available."
    )
}

lang = lang_code if lang_code in ["ru", "uk"] else "en"
system_prompt = system_prompt_template.get(lang, system_prompt_template["en"])
–¢—ã ‚Äî AI Assistant –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã: –ø—Ä–æ–µ–∫—Ç—ã Avalon, OM, BUDDHA, TAO, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ë–∞–ª–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏—Å—å. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.
"""

def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

def classify_user_input(prompt_text, user_text):
    try:
        result = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'ANSWER' –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ 'QUESTION' –µ—Å–ª–∏ –∑–∞–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å."},
                {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞: {prompt_text}\n–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}"}
            ]
        )
        return result.choices[0].message.content.strip().upper()
    except:
        return "ANSWER"

def extract_lead_data(text):
    data = {}
    text = text.strip()
    if len(text.split()) == 1 and text.isalpha():
        data["name"] = text.capitalize()
    if any(w in text.lower() for w in ["whatsapp", "–≤–∞—Ç—Å–∞–ø", "–≤–æ—Ç—Å–∞–ø"]):
        data["platform"] = "WhatsApp"
    elif "telegram" in text.lower():
        data["platform"] = "Telegram"
    elif "zoom" in text.lower():
        data["platform"] = "Zoom"
    if re.search(r"\+?\d{7,}", text):
        data["phone"] = text
    if any(w in text.lower() for w in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–≤–µ—á–µ—Ä–æ–º", "—É—Ç—Ä–æ–º"]):
        data["datetime"] = text
    return data

def get_step(lead):
    if "name" not in lead:
        return "name", "üëã –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    if "platform" not in lead:
        return "platform", "üì± –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: WhatsApp / Telegram / Zoom / Google Meet"
    if lead.get("platform", "").lower() == "whatsapp" and "phone" not in lead:
        return "phone", "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp:"
    if "datetime" not in lead:
        return "datetime", "üóì –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?"
    return None, None

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_id = message.get("from", {}).get("id")
    text = message.get("text", "").strip()
    username = message.get("from", {}).get("username", "")

    if text == "/start":
        send_telegram_message(chat_id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Avalon. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")
        return "ok"

    if user_id not in lead_data and any(w in text.lower() for w in call_request_triggers):
        lead_data[user_id] = {}
        send_telegram_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π.\nüëã –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return "ok"

    if user_id in lead_data:
        lead = lead_data.get(user_id, {})
        step, prompt = get_step(lead)
        if step:
            label = classify_user_input(prompt, text)
            if label == "QUESTION":
                send_telegram_message(chat_id, "‚ùì –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã!")
                return "ok"
            lead.update(extract_lead_data(text))
            lead_data[user_id] = lead
            step, prompt = get_step(lead)
            if not step:
                now = datetime.now().strftime("%Y-%m-%d %H:%M")
                dt = lead.get("datetime", "").split()
                date_part = dt[0] if len(dt) > 0 else ""
                time_part = dt[1] if len(dt) > 1 else ""
                datetime_raw = lead.get("datetime", "").strip().lower()
date_part = ""
time_part = ""

for word in datetime_raw.split():
    if word in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞"]:
        date_part = word
    elif word in ["—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º", "–¥–Ω–µ–º", "–≤–µ—á–µ—Ä", "—É—Ç—Ä–æ", "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞"]:
        time_part = word

wa_url = f"https://wa.me/{lead.get('phone')}" if lead.get("platform") == "WhatsApp" and lead.get("phone") else ""
project = ""
text_lower = text.lower()
if any(w in text_lower for w in ["–æ–º", "om"]):
    project = "OM"
elif any(w in text_lower for w in ["buddha", "–±—É–¥–¥–∞"]):
    project = "BUDDHA"
elif any(w in text_lower for w in ["tao", "—Ç–∞–æ", "—Ç–∞—É"]):
    project = "TAO"  # –ü–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è

now = datetime.now().strftime("%Y-%m-%d %H:%M")
t = text.lower()

platform = lead.get("platform", "")
wa_url = f"https://wa.me/{lead.get('phone')}" if platform == "WhatsApp" and lead.get("phone") else ""
datetime_value = lead.get("datetime", "")

project = ""
if "–æ–º" in t or "om" in t:
    project = "OM"
elif "–±—É–¥–¥–∞" in t or "buddha" in t:
    project = "BUDDHA"
elif "—Ç–∞–æ" in t or "tao" in t or "—Ç–∞—É" in t:
    project = "TAO"

sheet.append_row([
    now,
    lead.get("name", ""),
    f"@{username}",
    platform,
    wa_url,
    datetime_value,
    project,
    "ru"
])
                send_telegram_message(chat_id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
                lead_data.pop(user_id, None)
                return "ok"
            send_telegram_message(chat_id, prompt)
            return "ok"

    # GPT fallback if no form is active
    history = sessions.get(user_id, [])
    messages = [
        {"role": "system", "content": f"{system_prompt}

{documents_context}"},
        *history[-6:],
        {"role": "user", "content": text}
    ]
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        reply = "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    sessions[user_id] = history + [{"role": "user", "content": text}, {"role": "assistant", "content": reply}]
    send_telegram_message(chat_id, reply)
    return "ok"

@app.route("/")
def home():
    return "Avalon AI –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
